/*
   CheMPS2: a spin-adapted implementation of DMRG for ab initio quantum chemistry
   Copyright (C) 2013-2015 Sebastian Wouters

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along
   with this program; if not, write to the Free Software Foundation, Inc.,
   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#include <iostream>
#include <math.h>
#include <string.h>

#include "Initialize.h"
#include "DMRG.h"
#include "FCI.h"

using namespace std;

int main(void){

   CheMPS2::Initialize::Init();
  
   //The path to the matrix elements
   string matrixelements = "${CMAKE_SOURCE_DIR}/tests/matrixelements/N2.STO3G.FCIDUMP";
 
   //The Hamiltonian
   const int psi4groupnumber = 7; // d2h -- see Irreps.h and N2.sto3g.out
   CheMPS2::Hamiltonian * Ham = new CheMPS2::Hamiltonian( matrixelements, psi4groupnumber );
   cout << "The group was found to be " << CheMPS2::Irreps::getGroupName(Ham->getNGroup()) << endl;

   //Look at a few symmetry sectors
   const int Nelec    = 14;
   const int nSectors = 6;
   int * TwoS     = new int[nSectors];
   int * Irreps   = new int[nSectors];
   double * EFCI  = new double[nSectors];
   double * EDMRG = new double[nSectors];
   TwoS[0] = 0; Irreps[0] = 0;
   TwoS[1] = 2; Irreps[1] = 5;
   TwoS[2] = 4; Irreps[2] = 0;
   TwoS[3] = 4; Irreps[3] = 5;
   TwoS[4] = 2; Irreps[4] = 2;
   TwoS[5] = 2; Irreps[5] = 6;
   
   for (int counter=0; counter<nSectors; counter++){
      
      //Perform full configuration interation
      const int Nel_up   = ( Nelec + TwoS[counter] ) / 2;
      const int Nel_down = ( Nelec - TwoS[counter] ) / 2;
      const double maxMemWorkMB = 10.0;
      const int FCIverbose = 1;
      CheMPS2::FCI * theFCI = new CheMPS2::FCI(Ham, Nel_up, Nel_down, Irreps[counter], maxMemWorkMB, FCIverbose);
      double * inoutput = new double[theFCI->getVecLength(0)];
      theFCI->ClearVector(theFCI->getVecLength(0), inoutput);
      inoutput[ theFCI->LowestEnergyDeterminant() ] = 1.0;
      EFCI[counter] = theFCI->GSDavidson(inoutput);
      theFCI->CalcSpinSquared(inoutput);
      delete [] inoutput;
      delete theFCI;
      
      //The targeted symmetry sector and the Hamiltonian form together a FCI problem
      CheMPS2::Problem * Prob = new CheMPS2::Problem(Ham, TwoS[counter], Nelec, Irreps[counter]);
      
      //To perform DMRG, a set of convergence instructions should be added as well (normally more than 1 instruction should be used)
      CheMPS2::ConvergenceScheme OptScheme(1);
      //Instructions can be set with OptScheme.setInstruction(instruction_counter, DSU(2), Econvergence, maxSweeps, noisePrefactor);
      OptScheme.setInstruction(0, 2000, 1e-10, 100, 0.0);
      
      CheMPS2::DMRG * theDMRG = new CheMPS2::DMRG(Prob, &OptScheme);
      EDMRG[counter] = theDMRG->Solve();
      theDMRG->calc2DMandCorrelations();
      if (CheMPS2::DMRG_storeMpsOnDisk){ theDMRG->deleteStoredMPS(); }
      if (CheMPS2::DMRG_storeRenormOptrOnDisk){ theDMRG->deleteStoredOperators(); }
      
      //Clean up
      delete theDMRG;
      delete Prob;

   }
   
   //Clean up
   delete Ham;
   
   //Check success
   bool success = true;
   for (int cnt=0; cnt<nSectors; cnt++){
      success = ( success ) && ( fabs( EDMRG[cnt] - EFCI[cnt] ) < 1e-10 );
   }
   
   delete [] EFCI;
   delete [] EDMRG;
   delete [] TwoS;
   delete [] Irreps;
   
   cout << "================> Did test 1 succeed : ";
   if (success){
      cout << "yes" << endl;
      return 0; //Success
   }
   cout << "no" << endl;
   return 7; //Fail

}


